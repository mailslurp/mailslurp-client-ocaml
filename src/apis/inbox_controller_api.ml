(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

let cancel_scheduled_job ~job_id =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/scheduled-jobs/{jobId}" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "jobId"  job_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Scheduled_job_dto.of_yojson) resp body

let create_inbox ?email_address ?(tags = []) ?name ?description ?use_domain_pool ?favourite ?expires_at ?expires_in ?allow_team_access ?inbox_type ?virtual_inbox ?use_short_address ?domain_id ?domain_name ?prefix () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.maybe_add_query_param uri "emailAddress" (fun x -> x) email_address in
    let uri = Request.add_query_param_list uri "tags" (List.map (fun x -> x)) tags in
    let uri = Request.maybe_add_query_param uri "name" (fun x -> x) name in
    let uri = Request.maybe_add_query_param uri "description" (fun x -> x) description in
    let uri = Request.maybe_add_query_param uri "useDomainPool" string_of_bool use_domain_pool in
    let uri = Request.maybe_add_query_param uri "favourite" string_of_bool favourite in
    let uri = Request.maybe_add_query_param uri "expiresAt" (fun x -> x) expires_at in
    let uri = Request.maybe_add_query_param uri "expiresIn" Int64.to_string expires_in in
    let uri = Request.maybe_add_query_param uri "allowTeamAccess" string_of_bool allow_team_access in
    let uri = Request.maybe_add_query_param uri "inboxType" Enums.show_inboxtype inbox_type in
    let uri = Request.maybe_add_query_param uri "virtualInbox" string_of_bool virtual_inbox in
    let uri = Request.maybe_add_query_param uri "useShortAddress" string_of_bool use_short_address in
    let uri = Request.maybe_add_query_param uri "domainId"  domain_id in
    let uri = Request.maybe_add_query_param uri "domainName" (fun x -> x) domain_name in
    let uri = Request.maybe_add_query_param uri "prefix" (fun x -> x) prefix in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inbox_dto.of_yojson) resp body

let create_inbox_ruleset ~inbox_id ~create_inbox_ruleset_options_t =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/{inboxId}/rulesets" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "inboxId"  inbox_id in
    let body = Request.write_as_json_body Create_inbox_ruleset_options.to_yojson create_inbox_ruleset_options_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inbox_ruleset_dto.of_yojson) resp body

let create_inbox_with_defaults () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/withDefaults" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inbox_dto.of_yojson) resp body

let create_inbox_with_options ~create_inbox_dto_t =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/withOptions" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let body = Request.write_as_json_body Create_inbox_dto.to_yojson create_inbox_dto_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inbox_dto.of_yojson) resp body

let delete_all_inbox_emails ~inbox_id =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/{inboxId}/deleteAllInboxEmails" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "inboxId"  inbox_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let delete_all_inboxes () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let delete_all_inboxes_by_description ~description =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/by-description" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.add_query_param uri "description" (fun x -> x) description in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let delete_all_inboxes_by_name ~name =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/by-name" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.add_query_param uri "name" (fun x -> x) name in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let delete_all_inboxes_by_tag ~tag =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/by-tag" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.add_query_param uri "tag" (fun x -> x) tag in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let delete_inbox ~inbox_id =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/{inboxId}" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "inboxId"  inbox_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let does_inbox_exist ~email_address ?allow_catch_all () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/exists" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.add_query_param uri "emailAddress" (fun x -> x) email_address in
    let uri = Request.maybe_add_query_param uri "allowCatchAll" string_of_bool allow_catch_all in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inbox_exists_dto.of_yojson) resp body

let flush_expired ?before () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/expired" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.maybe_add_query_param uri "before" (fun x -> x) before in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Flush_expired_inboxes_result.of_yojson) resp body

let get_all_inboxes ?(page = 0l) ?(size = 20l) ?(sort = `ASC) ?(favourite = false) ?search ?tag ?team_access ?since ?before ?inbox_type ?inbox_function ?domain_id () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/paginated" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    let uri = Request.add_query_param uri "size" Int32.to_string size in
    let uri = Request.add_query_param uri "sort" Enums.show_sortdirection sort in
    let uri = Request.add_query_param uri "favourite" string_of_bool favourite in
    let uri = Request.maybe_add_query_param uri "search" (fun x -> x) search in
    let uri = Request.maybe_add_query_param uri "tag" (fun x -> x) tag in
    let uri = Request.maybe_add_query_param uri "teamAccess" string_of_bool team_access in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.maybe_add_query_param uri "before" (fun x -> x) before in
    let uri = Request.maybe_add_query_param uri "inboxType" Enums.show_inboxtype inbox_type in
    let uri = Request.maybe_add_query_param uri "inboxFunction" Enums.show_functionsas inbox_function in
    let uri = Request.maybe_add_query_param uri "domainId"  domain_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Page_inbox_projection.of_yojson) resp body

let get_all_inboxes_offset_paginated ?(page = 0l) ?(size = 20l) ?(sort = `ASC) ?(favourite = false) ?search ?tag ?team_access ?since ?before ?inbox_type ?inbox_function ?domain_id () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/offset-paginated" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    let uri = Request.add_query_param uri "size" Int32.to_string size in
    let uri = Request.add_query_param uri "sort" Enums.show_sortdirection sort in
    let uri = Request.add_query_param uri "favourite" string_of_bool favourite in
    let uri = Request.maybe_add_query_param uri "search" (fun x -> x) search in
    let uri = Request.maybe_add_query_param uri "tag" (fun x -> x) tag in
    let uri = Request.maybe_add_query_param uri "teamAccess" string_of_bool team_access in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.maybe_add_query_param uri "before" (fun x -> x) before in
    let uri = Request.maybe_add_query_param uri "inboxType" Enums.show_inboxtype inbox_type in
    let uri = Request.maybe_add_query_param uri "inboxFunction" Enums.show_functionsas inbox_function in
    let uri = Request.maybe_add_query_param uri "domainId"  domain_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Page_inbox_projection.of_yojson) resp body

let get_all_scheduled_jobs ?(page = 0l) ?(size = 20l) ?(sort = `ASC) ?since ?before () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/scheduled-jobs" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    let uri = Request.add_query_param uri "size" Int32.to_string size in
    let uri = Request.add_query_param uri "sort" Enums.show_sortdirection sort in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.maybe_add_query_param uri "before" (fun x -> x) before in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Page_scheduled_jobs.of_yojson) resp body

let get_delivery_statuses_by_inbox_id ~inbox_id ?(page = 0l) ?(size = 20l) ?(sort = `ASC) ?since ?before () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/{inboxId}/delivery-status" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "inboxId"  inbox_id in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    let uri = Request.add_query_param uri "size" Int32.to_string size in
    let uri = Request.add_query_param uri "sort" Enums.show_sortdirection sort in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.maybe_add_query_param uri "before" (fun x -> x) before in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Page_delivery_status.of_yojson) resp body

let get_emails ~inbox_id ?size ?limit ?sort ?retry_timeout ?delay_timeout ?min_count ?unread_only ?before ?since () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/{inboxId}/emails" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "inboxId"  inbox_id in
    let uri = Request.maybe_add_query_param uri "size" Int32.to_string size in
    let uri = Request.maybe_add_query_param uri "limit" Int32.to_string limit in
    let uri = Request.maybe_add_query_param uri "sort" Enums.show_sortdirection sort in
    let uri = Request.maybe_add_query_param uri "retryTimeout" Int64.to_string retry_timeout in
    let uri = Request.maybe_add_query_param uri "delayTimeout" Int64.to_string delay_timeout in
    let uri = Request.maybe_add_query_param uri "minCount" Int64.to_string min_count in
    let uri = Request.maybe_add_query_param uri "unreadOnly" string_of_bool unread_only in
    let uri = Request.maybe_add_query_param uri "before" (fun x -> x) before in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Email_preview.of_yojson) resp body

let get_imap_access ?inbox_id () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/imap-access" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.maybe_add_query_param uri "inboxId"  inbox_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Imap_access_details.of_yojson) resp body

let get_imap_smtp_access ?inbox_id () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/imap-smtp-access" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.maybe_add_query_param uri "inboxId"  inbox_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Imap_smtp_access_details.of_yojson) resp body

let get_imap_smtp_access_env ?inbox_id () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/imap-smtp-access/env" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.maybe_add_query_param uri "inboxId"  inbox_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.to_string) resp body

let get_inbox ~inbox_id =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/{inboxId}" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "inboxId"  inbox_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inbox_dto.of_yojson) resp body

let get_inbox_by_email_address ~email_address =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/byEmailAddress" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.add_query_param uri "emailAddress" (fun x -> x) email_address in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inbox_by_email_address_result.of_yojson) resp body

let get_inbox_by_name ~name =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/byName" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.add_query_param uri "name" (fun x -> x) name in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inbox_by_name_result.of_yojson) resp body

let get_inbox_count () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/count" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Count_dto.of_yojson) resp body

let get_inbox_email_count ~inbox_id =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/{inboxId}/emails/count" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "inboxId"  inbox_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Count_dto.of_yojson) resp body

let get_inbox_emails_paginated ~inbox_id ?(page = 0l) ?(size = 20l) ?(sort = `ASC) ?since ?before () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/{inboxId}/emails/paginated" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "inboxId"  inbox_id in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    let uri = Request.add_query_param uri "size" Int32.to_string size in
    let uri = Request.add_query_param uri "sort" Enums.show_sortdirection sort in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.maybe_add_query_param uri "before" (fun x -> x) before in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Page_email_preview.of_yojson) resp body

let get_inbox_ids () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/ids" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inbox_ids_result.of_yojson) resp body

let get_inbox_sent_emails ~inbox_id ?(page = 0l) ?(size = 20l) ?(sort = `ASC) ?search_filter ?since ?before () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/{inboxId}/sent" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "inboxId"  inbox_id in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    let uri = Request.add_query_param uri "size" Int32.to_string size in
    let uri = Request.add_query_param uri "sort" Enums.show_sortdirection sort in
    let uri = Request.maybe_add_query_param uri "searchFilter" (fun x -> x) search_filter in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.maybe_add_query_param uri "before" (fun x -> x) before in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Page_sent_email_projection.of_yojson) resp body

let get_inbox_tags () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/tags" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.to_string) resp body

let get_inboxes ?(size = 100l) ?(sort = `ASC) ?since ?exclude_catch_all_inboxes ?before () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.add_query_param uri "size" Int32.to_string size in
    let uri = Request.add_query_param uri "sort" Enums.show_sortdirection sort in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.maybe_add_query_param uri "excludeCatchAllInboxes" string_of_bool exclude_catch_all_inboxes in
    let uri = Request.maybe_add_query_param uri "before" (fun x -> x) before in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Inbox_dto.of_yojson) resp body

let get_latest_email_in_inbox ~inbox_id ~timeout_millis =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/getLatestEmail" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.add_query_param uri "inboxId"  inbox_id in
    let uri = Request.add_query_param uri "timeoutMillis" Int64.to_string timeout_millis in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Email.of_yojson) resp body

let get_organization_inboxes ?(page = 0l) ?(size = 20l) ?(sort = `ASC) ?search_filter ?since ?before () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/organization" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    let uri = Request.add_query_param uri "size" Int32.to_string size in
    let uri = Request.add_query_param uri "sort" Enums.show_sortdirection sort in
    let uri = Request.maybe_add_query_param uri "searchFilter" (fun x -> x) search_filter in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.maybe_add_query_param uri "before" (fun x -> x) before in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Page_organization_inbox_projection.of_yojson) resp body

let get_scheduled_job ~job_id =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/scheduled-jobs/{jobId}" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "jobId"  job_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Scheduled_job_dto.of_yojson) resp body

let get_scheduled_jobs_by_inbox_id ~inbox_id ?(page = 0l) ?(size = 20l) ?(sort = `ASC) ?since ?before () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/{inboxId}/scheduled-jobs" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "inboxId"  inbox_id in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    let uri = Request.add_query_param uri "size" Int32.to_string size in
    let uri = Request.add_query_param uri "sort" Enums.show_sortdirection sort in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.maybe_add_query_param uri "before" (fun x -> x) before in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Page_scheduled_jobs.of_yojson) resp body

let get_smtp_access ?inbox_id () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/smtp-access" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.maybe_add_query_param uri "inboxId"  inbox_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Smtp_access_details.of_yojson) resp body

let list_inbox_rulesets ~inbox_id ?(page = 0l) ?(size = 20l) ?(sort = `ASC) ?search_filter ?since ?before () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/{inboxId}/rulesets" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "inboxId"  inbox_id in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    let uri = Request.add_query_param uri "size" Int32.to_string size in
    let uri = Request.add_query_param uri "sort" Enums.show_sortdirection sort in
    let uri = Request.maybe_add_query_param uri "searchFilter" (fun x -> x) search_filter in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.maybe_add_query_param uri "before" (fun x -> x) before in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Page_inbox_ruleset_dto.of_yojson) resp body

let list_inbox_tracking_pixels ~inbox_id ?(page = 0l) ?(size = 20l) ?(sort = `ASC) ?search_filter ?since ?before () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/{inboxId}/tracking-pixels" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "inboxId"  inbox_id in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    let uri = Request.add_query_param uri "size" Int32.to_string size in
    let uri = Request.add_query_param uri "sort" Enums.show_sortdirection sort in
    let uri = Request.maybe_add_query_param uri "searchFilter" (fun x -> x) search_filter in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.maybe_add_query_param uri "before" (fun x -> x) before in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Page_tracking_pixel_projection.of_yojson) resp body

let search_inboxes ~search_inboxes_options_t =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/search" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let body = Request.write_as_json_body Search_inboxes_options.to_yojson search_inboxes_options_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Page_inbox_projection.of_yojson) resp body

let send_email ~inbox_id ~send_email_options_t =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/{inboxId}" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "inboxId"  inbox_id in
    let body = Request.write_as_json_body Send_email_options.to_yojson send_email_options_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let send_email_and_confirm ~inbox_id ~send_email_options_t =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/{inboxId}/confirm" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "inboxId"  inbox_id in
    let body = Request.write_as_json_body Send_email_options.to_yojson send_email_options_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Sent_email_dto.of_yojson) resp body

let send_email_with_queue ~inbox_id ~validate_before_enqueue ~send_email_options_t =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/{inboxId}/with-queue" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "inboxId"  inbox_id in
    let uri = Request.add_query_param uri "validateBeforeEnqueue" string_of_bool validate_before_enqueue in
    let body = Request.write_as_json_body Send_email_options.to_yojson send_email_options_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let send_smtp_envelope ~inbox_id ~send_smtp_envelope_options_t =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/{inboxId}/smtp-envelope" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "inboxId"  inbox_id in
    let body = Request.write_as_json_body Send_smtp_envelope_options.to_yojson send_smtp_envelope_options_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Sent_email_dto.of_yojson) resp body

let send_test_email ~inbox_id =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/{inboxId}/send-test-email" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "inboxId"  inbox_id in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let send_with_schedule ~inbox_id ~send_email_options_t ?send_at_timestamp ?send_at_now_plus_seconds ?validate_before_enqueue () =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/{inboxId}/with-schedule" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "inboxId"  inbox_id in
    let uri = Request.maybe_add_query_param uri "sendAtTimestamp" (fun x -> x) send_at_timestamp in
    let uri = Request.maybe_add_query_param uri "sendAtNowPlusSeconds" Int64.to_string send_at_now_plus_seconds in
    let uri = Request.maybe_add_query_param uri "validateBeforeEnqueue" string_of_bool validate_before_enqueue in
    let body = Request.write_as_json_body Send_email_options.to_yojson send_email_options_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Scheduled_job_dto.of_yojson) resp body

let set_inbox_favourited ~inbox_id ~set_inbox_favourited_options_t =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/{inboxId}/favourite" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "inboxId"  inbox_id in
    let body = Request.write_as_json_body Set_inbox_favourited_options.to_yojson set_inbox_favourited_options_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inbox_dto.of_yojson) resp body

let update_inbox ~inbox_id ~update_inbox_options_t =
    let open Lwt in
    let uri = Request.build_uri "/inboxes/{inboxId}" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "inboxId"  inbox_id in
    let body = Request.write_as_json_body Update_inbox_options.to_yojson update_inbox_options_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inbox_dto.of_yojson) resp body

