(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

let create_connector ~create_connector_options_t ?inbox_id () =
    let open Lwt in
    let uri = Request.build_uri "/connectors" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.maybe_add_query_param uri "inboxId"  inbox_id in
    let body = Request.write_as_json_body Create_connector_options.to_yojson create_connector_options_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Connector_dto.of_yojson) resp body

let create_connector_imap_connection ~id ~create_connector_imap_connection_options_t =
    let open Lwt in
    let uri = Request.build_uri "/connectors/{id}/imap" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "id"  id in
    let body = Request.write_as_json_body Create_connector_imap_connection_options.to_yojson create_connector_imap_connection_options_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Connector_imap_connection_dto.of_yojson) resp body

let create_connector_smtp_connection ~id ~create_connector_smtp_connection_options_t =
    let open Lwt in
    let uri = Request.build_uri "/connectors/{id}/smtp" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "id"  id in
    let body = Request.write_as_json_body Create_connector_smtp_connection_options.to_yojson create_connector_smtp_connection_options_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Connector_smtp_connection_dto.of_yojson) resp body

let create_connector_sync_settings ~id ~create_connector_sync_settings_options_t =
    let open Lwt in
    let uri = Request.build_uri "/connectors/{id}/sync-settings" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "id"  id in
    let body = Request.write_as_json_body Create_connector_sync_settings_options.to_yojson create_connector_sync_settings_options_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Connector_sync_settings_dto.of_yojson) resp body

let create_connector_with_options ~create_connector_with_options_t ?inbox_id () =
    let open Lwt in
    let uri = Request.build_uri "/connectors/withOptions" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.maybe_add_query_param uri "inboxId"  inbox_id in
    let body = Request.write_as_json_body Create_connector_with_options.to_yojson create_connector_with_options_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Connector_dto.of_yojson) resp body

let delete_all_connector () =
    let open Lwt in
    let uri = Request.build_uri "/connectors" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let delete_connector ~id =
    let open Lwt in
    let uri = Request.build_uri "/connectors/{id}" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "id"  id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let delete_connector_imap_connection ~id =
    let open Lwt in
    let uri = Request.build_uri "/connectors/{id}/imap" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "id"  id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let delete_connector_smtp_connection ~id =
    let open Lwt in
    let uri = Request.build_uri "/connectors/{id}/smtp" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "id"  id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let delete_connector_sync_settings ~id =
    let open Lwt in
    let uri = Request.build_uri "/connectors/{id}/sync-settings" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "id"  id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let get_all_connector_events ?id ?(page = 0l) ?(size = 20l) ?(sort = `ASC) ?since ?before ?event_type () =
    let open Lwt in
    let uri = Request.build_uri "/connectors/events" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.maybe_add_query_param uri "id"  id in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    let uri = Request.add_query_param uri "size" Int32.to_string size in
    let uri = Request.add_query_param uri "sort" Enums.show_sortdirection sort in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.maybe_add_query_param uri "before" (fun x -> x) before in
    let uri = Request.maybe_add_query_param uri "eventType" Enums.show_eventtype event_type in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Page_connector_events.of_yojson) resp body

let get_connector ~id =
    let open Lwt in
    let uri = Request.build_uri "/connectors/{id}" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "id"  id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Connector_dto.of_yojson) resp body

let get_connector_by_email_address ~email_address =
    let open Lwt in
    let uri = Request.build_uri "/connectors/by-email-address" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.add_query_param uri "emailAddress" (fun x -> x) email_address in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Optional_connector_dto.of_yojson) resp body

let get_connector_by_inbox_id ~inbox_id =
    let open Lwt in
    let uri = Request.build_uri "/connectors/by-inbox-id" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.add_query_param uri "inboxId"  inbox_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Optional_connector_dto.of_yojson) resp body

let get_connector_by_name ~name =
    let open Lwt in
    let uri = Request.build_uri "/connectors/by-name" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.add_query_param uri "name" (fun x -> x) name in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Optional_connector_dto.of_yojson) resp body

let get_connector_event ~id =
    let open Lwt in
    let uri = Request.build_uri "/connectors/events/{id}" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "id"  id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Connector_event_dto.of_yojson) resp body

let get_connector_events ~id ?(page = 0l) ?(size = 20l) ?(sort = `ASC) ?since ?before ?event_type () =
    let open Lwt in
    let uri = Request.build_uri "/connectors/{id}/events" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "id"  id in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    let uri = Request.add_query_param uri "size" Int32.to_string size in
    let uri = Request.add_query_param uri "sort" Enums.show_sortdirection sort in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.maybe_add_query_param uri "before" (fun x -> x) before in
    let uri = Request.maybe_add_query_param uri "eventType" Enums.show_eventtype event_type in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Page_connector_events.of_yojson) resp body

let get_connector_imap_connection ~id =
    let open Lwt in
    let uri = Request.build_uri "/connectors/{id}/imap" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "id"  id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Optional_connector_imap_connection_dto.of_yojson) resp body

let get_connector_provider_settings () =
    let open Lwt in
    let uri = Request.build_uri "/connectors/provider-settings" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Connector_provider_settings_dto.of_yojson) resp body

let get_connector_smtp_connection ~id =
    let open Lwt in
    let uri = Request.build_uri "/connectors/{id}/smtp" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "id"  id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Optional_connector_smtp_connection_dto.of_yojson) resp body

let get_connector_sync_settings ~id =
    let open Lwt in
    let uri = Request.build_uri "/connectors/{id}/sync-settings" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "id"  id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Optional_connector_sync_settings_dto.of_yojson) resp body

let get_connectors ?(page = 0l) ?(size = 20l) ?(sort = `ASC) ?since ?before () =
    let open Lwt in
    let uri = Request.build_uri "/connectors" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    let uri = Request.add_query_param uri "size" Int32.to_string size in
    let uri = Request.add_query_param uri "sort" Enums.show_sortdirection sort in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.maybe_add_query_param uri "before" (fun x -> x) before in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Page_connector.of_yojson) resp body

let send_email_from_connector ~id ~send_email_options_t ?use_fallback () =
    let open Lwt in
    let uri = Request.build_uri "/connectors/{id}/send" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "id"  id in
    let uri = Request.maybe_add_query_param uri "useFallback" string_of_bool use_fallback in
    let body = Request.write_as_json_body Send_email_options.to_yojson send_email_options_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Sent_email_dto.of_yojson) resp body

let sync_connector ~id ?since ?folder ?logging () =
    let open Lwt in
    let uri = Request.build_uri "/connectors/{id}/sync" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "id"  id in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.maybe_add_query_param uri "folder" (fun x -> x) folder in
    let uri = Request.maybe_add_query_param uri "logging" string_of_bool logging in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Connector_sync_request_result.of_yojson) resp body

let test_connector_imap_connection ~id ~create_connector_imap_connection_options_t () =
    let open Lwt in
    let uri = Request.build_uri "/connectors/{id}/imap/test" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "id"  id in
    let body = Request.write_as_json_body Create_connector_imap_connection_options.to_yojson create_connector_imap_connection_options_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Connector_imap_connection_test_result.of_yojson) resp body

let test_connector_imap_connection_options ~create_connector_imap_connection_options_t =
    let open Lwt in
    let uri = Request.build_uri "/connectors/connections/imap/test" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let body = Request.write_as_json_body Create_connector_imap_connection_options.to_yojson create_connector_imap_connection_options_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Connector_imap_connection_test_result.of_yojson) resp body

let test_connector_smtp_connection ~id ~create_connector_smtp_connection_options_t () =
    let open Lwt in
    let uri = Request.build_uri "/connectors/{id}/smtp/test" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "id"  id in
    let body = Request.write_as_json_body Create_connector_smtp_connection_options.to_yojson create_connector_smtp_connection_options_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Connector_smtp_connection_test_result.of_yojson) resp body

let test_connector_smtp_connection_options ~create_connector_smtp_connection_options_t =
    let open Lwt in
    let uri = Request.build_uri "/connectors/connections/smtp/test" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let body = Request.write_as_json_body Create_connector_smtp_connection_options.to_yojson create_connector_smtp_connection_options_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Connector_smtp_connection_test_result.of_yojson) resp body

let update_connector ~id ~create_connector_options_t =
    let open Lwt in
    let uri = Request.build_uri "/connectors/{id}" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "id"  id in
    let body = Request.write_as_json_body Create_connector_options.to_yojson create_connector_options_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Connector_dto.of_yojson) resp body

let update_connector_imap_connection ~id ~create_connector_imap_connection_options_t =
    let open Lwt in
    let uri = Request.build_uri "/connectors/{id}/imap" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "id"  id in
    let body = Request.write_as_json_body Create_connector_imap_connection_options.to_yojson create_connector_imap_connection_options_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Connector_imap_connection_dto.of_yojson) resp body

let update_connector_smtp_connection ~id ~create_connector_smtp_connection_options_t =
    let open Lwt in
    let uri = Request.build_uri "/connectors/{id}/smtp" in
    let headers = Request.default_headers in
    let headers = Cohttp.Header.add headers "x-api-key" Request.api_key in
    let uri = Request.replace_path_param uri "id"  id in
    let body = Request.write_as_json_body Create_connector_smtp_connection_options.to_yojson create_connector_smtp_connection_options_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Connector_smtp_connection_dto.of_yojson) resp body

