(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Email.t : Email entity (also known as EmailDto). When an SMTP email message is received by MailSlurp it is parsed. The body and attachments are written to disk and the fields such as to, from, subject etc are stored in a database. The `body` contains the email content. If you want the original SMTP message see the `getRawEmail` endpoints. The attachments can be fetched using the AttachmentController
 *)

type t = {
    (* ID of the email entity *)
    id: string;
    (* ID of user that email belongs to *)
    user_id: string;
    (* ID of the inbox that received the email *)
    inbox_id: string;
    (* ID of the domain that received the email *)
    domain_id: string option [@default None];
    (* List of `To` recipient email addresses that the email was addressed to. See recipients object for names. *)
    _to: string list;
    (* Who the email was sent from. An email address - see fromName for the sender name. *)
    from: string option [@default None];
    sender: Sender.t option [@default None];
    recipients: Email_recipients.t option [@default None];
    (* The `replyTo` field on the received email message *)
    reply_to: string option [@default None];
    (* List of `CC` recipients email addresses that the email was addressed to. See recipients object for names. *)
    cc: string list;
    (* List of `BCC` recipients email addresses that the email was addressed to. See recipients object for names. *)
    bcc: string list;
    (* Collection of SMTP headers attached to email *)
    headers: (string * string) list;
    (* List of IDs of attachments found in the email. Use these IDs with the Inbox and Email Controllers to download attachments and attachment meta data such as filesize, name, extension. *)
    attachments: string list;
    (* The subject line of the email message as specified by SMTP subject header *)
    subject: string option [@default None];
    (* The body of the email message as text parsed from the SMTP message body (does not include attachments). Fetch the raw content to access the SMTP message and use the attachments property to access attachments. The body is stored separately to the email entity so the body is not returned in paginated results only in full single email or wait requests. *)
    body: string option [@default None];
    (* An excerpt of the body of the email message for quick preview . *)
    body_excerpt: string option [@default None];
    (* A hash signature of the email message using MD5. Useful for comparing emails without fetching full body. *)
    body_md5_hash: string option [@default None];
    (* Is the email body content type HTML? *)
    is_html: bool option [@default None];
    (* Detected character set of the email body such as UTF-8 *)
    charset: string option [@default None];
    analysis: Email_analysis.t option [@default None];
    (* When was the email received by MailSlurp *)
    created_at: string;
    (* When was the email last updated *)
    updated_at: string;
    (* Read flag. Has the email ever been viewed in the dashboard or fetched via the API with a hydrated body? If so the email is marked as read. Paginated results do not affect read status. Read status is different to email opened event as it depends on your own account accessing the email. Email opened is determined by tracking pixels sent to other uses if enable during sending. You can listened for both email read and email opened events using webhooks. *)
    read: bool;
    (* Can the email be accessed by organization team members *)
    team_access: bool;
    html: bool option [@default None];
} [@@deriving yojson { strict = false }, show ];;

(** Email entity (also known as EmailDto). When an SMTP email message is received by MailSlurp it is parsed. The body and attachments are written to disk and the fields such as to, from, subject etc are stored in a database. The `body` contains the email content. If you want the original SMTP message see the `getRawEmail` endpoints. The attachments can be fetched using the AttachmentController *)
let create (id : string) (user_id : string) (inbox_id : string) (_to : string list) (created_at : string) (updated_at : string) (read : bool) (team_access : bool) : t = {
    id = id;
    user_id = user_id;
    inbox_id = inbox_id;
    domain_id = None;
    _to = _to;
    from = None;
    sender = None;
    recipients = None;
    reply_to = None;
    cc = [];
    bcc = [];
    headers = [];
    attachments = [];
    subject = None;
    body = None;
    body_excerpt = None;
    body_md5_hash = None;
    is_html = None;
    charset = None;
    analysis = None;
    created_at = created_at;
    updated_at = updated_at;
    read = read;
    team_access = team_access;
    html = None;
}

