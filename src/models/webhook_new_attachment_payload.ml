(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Webhook_new_attachment_payload.t : NEW_ATTACHMENT webhook payload. Sent to your webhook url endpoint via HTTP POST when an email is received by the inbox that your webhook is attached to that contains an attachment. You can use the attachmentId to download the attachment.
 *)

type t = {
    (* Idempotent message ID. Store this ID locally or in a database to prevent message duplication. *)
    message_id: string option [@default None];
    (* ID of webhook entity being triggered *)
    webhook_id: string option [@default None];
    (* Name of the webhook being triggered *)
    webhook_name: string option [@default None];
    (* Name of the event type webhook is being triggered for. *)
    event_name: Enums.eventname option [@default None];
    (* ID of attachment. Use the `AttachmentController` to *)
    attachment_id: string option [@default None];
    (* Filename of the attachment if present *)
    name: string option [@default None];
    (* Content type of attachment such as 'image/png' or 'application/pdf *)
    content_type: string option [@default None];
    (* Size of attachment in bytes *)
    content_length: int64 option [@default None];
} [@@deriving yojson { strict = false }, show ];;

(** NEW_ATTACHMENT webhook payload. Sent to your webhook url endpoint via HTTP POST when an email is received by the inbox that your webhook is attached to that contains an attachment. You can use the attachmentId to download the attachment. *)
let create () : t = {
    message_id = None;
    webhook_id = None;
    webhook_name = None;
    event_name = None;
    attachment_id = None;
    name = None;
    content_type = None;
    content_length = None;
}

