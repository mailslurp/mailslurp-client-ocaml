(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Webhook_dto.t : Representation of a webhook for an inbox. The URL specified will be using by MailSlurp whenever an email is received by the attached inbox. A webhook entity should have a URL that points to your server. Your server should accept HTTP/S POST requests and return a success 200. MailSlurp will retry your webhooks if they fail. See https://api.mailslurp.com/schemas/webhook-payload for the payload schema.
 *)

type t = {
    (* ID of the Webhook *)
    id: string option [@default None];
    (* User ID of the Webhook *)
    user_id: string option [@default None];
    (* Does webhook expect basic authentication? If true it means you created this webhook with a username and password. MailSlurp will use these in the URL to authenticate itself. *)
    basic_auth: bool option [@default None];
    (* Name of the webhook *)
    name: string option [@default None];
    (* The inbox that the Webhook will be triggered by *)
    inbox_id: string option [@default None];
    (* URL of your server that the webhook will be sent to. The schema of the JSON that is sent is described by the payloadJsonSchema. *)
    url: string option [@default None];
    (* HTTP method that your server endpoint must listen for *)
    _method: Enums.webhooktestrequest_method option [@default None];
    (* Deprecated. Fetch JSON Schema for webhook using the getJsonSchemaForWebhookPayload method *)
    payload_json_schema: string option [@default None];
    (* When the webhook was created *)
    created_at: string option [@default None];
    updated_at: string option [@default None];
    event_name: Enums.eventname option [@default None];
} [@@deriving yojson { strict = false }, show ];;

(** Representation of a webhook for an inbox. The URL specified will be using by MailSlurp whenever an email is received by the attached inbox. A webhook entity should have a URL that points to your server. Your server should accept HTTP/S POST requests and return a success 200. MailSlurp will retry your webhooks if they fail. See https://api.mailslurp.com/schemas/webhook-payload for the payload schema. *)
let create () : t = {
    id = None;
    user_id = None;
    basic_auth = None;
    name = None;
    inbox_id = None;
    url = None;
    _method = None;
    payload_json_schema = None;
    created_at = None;
    updated_at = None;
    event_name = None;
}

