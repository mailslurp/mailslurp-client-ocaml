(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Webhook_payload.t : MailSlurp webhook payload schema. This schema describes the JSON object that is sent via HTTP POST to webhook urls when an email is received by an inbox that a webhook is attached to. Payloads may be delivered multiple times so use the ID as a key for event uniqueness. The payload contains IDs for the email and inbox affected. Use these to fetch more data related to the event using appropriate inbox and email endpoints. See https://www.mailslurp.com/guides/email-webhooks/ for more information. Your webhook endpoint should accept POST HTTP request and return a 200 in under 30 seconds. Process the webhook asynchronously if you need to.
 *)

type t = {
    (* List of attachment meta data objects if attachments present *)
    attachment_meta_datas: Attachment_meta_data.t list;
    (* List of `BCC` recipients email was addressed to *)
    bcc: string list;
    (* List of `CC` recipients email was addressed to *)
    cc: string list;
    (* Date time of event creation *)
    created_at: string option [@default None];
    (* ID of the email that was received. Use this ID for fetching the email *)
    email_id: string option [@default None];
    (* Name of the event type webhook is being triggered for *)
    event_name: Enums.eventname option [@default Some(`EMAIL_RECEIVED)];
    (* Who the email was sent from *)
    from: string option [@default None];
    (* Id of the inbox that receive an email *)
    inbox_id: string option [@default None];
    (* Idempotent message ID. Store this ID locally or in a database to prevent message duplication. *)
    message_id: string option [@default None];
    (* The subject line of the email message *)
    subject: string option [@default None];
    (* List of `To` recipients email was addressed to *)
    _to: string list;
    (* ID of webhook entity being triggered *)
    webhook_id: string option [@default None];
    (* Name of the webhook being triggered *)
    webhook_name: string option [@default None];
} [@@deriving yojson { strict = false }, show ];;

(** MailSlurp webhook payload schema. This schema describes the JSON object that is sent via HTTP POST to webhook urls when an email is received by an inbox that a webhook is attached to. Payloads may be delivered multiple times so use the ID as a key for event uniqueness. The payload contains IDs for the email and inbox affected. Use these to fetch more data related to the event using appropriate inbox and email endpoints. See https://www.mailslurp.com/guides/email-webhooks/ for more information. Your webhook endpoint should accept POST HTTP request and return a 200 in under 30 seconds. Process the webhook asynchronously if you need to. *)
let create () : t = {
    attachment_meta_datas = [];
    bcc = [];
    cc = [];
    created_at = None;
    email_id = None;
    event_name = None;
    from = None;
    inbox_id = None;
    message_id = None;
    subject = None;
    _to = [];
    webhook_id = None;
    webhook_name = None;
}

