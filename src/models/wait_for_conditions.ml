(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Wait_for_conditions.t : Conditions to apply to emails that you are waiting for
 *)

type t = {
    inbox_id: string option [@default None];
    (* Number of results that should match conditions. Either exactly or at least this amount based on the `countType`. If count condition is not met and the timeout has not been reached the `waitFor` method will retry the operation. *)
    count: int32 option [@default None];
    (* Max time in milliseconds to wait between retries if a `timeout` is specified. *)
    delay_timeout: int64 option [@default None];
    (* Max time in milliseconds to retry the `waitFor` operation until conditions are met. *)
    timeout: int64;
    (* Apply conditions only to **unread** emails. All emails begin with `read=false`. An email is marked `read=true` when an `EmailDto` representation of it has been returned to the user at least once. For example you have called `getEmail` or `waitForLatestEmail` etc., or you have viewed the email in the dashboard. *)
    unread_only: bool option [@default None];
    (* How result size should be compared with the expected size. Exactly or at-least matching result? *)
    count_type: Enums.counttype option [@default None];
    matches: Match_option.t list;
    sort_direction: Enums.sortdirection option [@default None];
    since: string option [@default None];
    before: string option [@default None];
} [@@deriving yojson { strict = false }, show ];;

(** Conditions to apply to emails that you are waiting for *)
let create (timeout : int64) : t = {
    inbox_id = None;
    count = None;
    delay_timeout = None;
    timeout = timeout;
    unread_only = None;
    count_type = None;
    matches = [];
    sort_direction = None;
    since = None;
    before = None;
}

